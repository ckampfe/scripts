#!/usr/bin/env ruby

### REMEMBER TO EDIT PASSWORD ###

### yet to do ###
# command flags,
# fixing of timestamp,
# custom interval,
# set env in the header (see the CLI book for this)
# get rid of hardcoded password
# allow for subject, to, from, adjustment/input
# error handling

# what about being able to incorporate an automatic, timed
# command run like
# "every hour, email me the results of 'find *.rb ~/oak/dev/my_lib | less'"
# that would be kinda cool and useful


require 'net/smtp'

# perhaps a bit clever...yields A-Z 0-9 char.
msg_gen = lambda { rand(2) > 0 ? ("A".."Z").to_a[rand(26)] : rand(10).to_s }
# a random string generated by calling the lambda 30 times
# the collect_concat method is...pretty esoteric.
# I've never seen it in anyone else's code. But this is Ruby, right?
# could also be substituted for #flat_map, which is functionally identical,
# according to the docs
my_message_id = (1..30).collect_concat { msg_gen.call }.join 

now = Time.now

# the goal here is to use the piped output
# from another program as the input text.
message_body = ARGV.shift

msgstr = <<END_OF_MESSAGE
From: Clark Kampfe <clark.kampfe@gmail.com>
To: Clark Kampfe <clark.kampfe@gmail.com>
Subject: time test 
Date: #{now} 
Message-Id: <#{my_message_id}@mail.gmail.com>

#{message_body}
END_OF_MESSAGE

# docs: http://rubydoc.org/stdlib/net/1.9.3/Net/SMTP#enable_tls-instance_method
def send_mail(m)
  con = Net::SMTP.new('smtp.googlemail.com', 465)
  con.enable_tls
  con.start('gmail.com', 'clark.kampfe', 'INSERT_PASSWORD_HERE', :login) do |smtp|
    smtp.send_message m, 'clark.kampfe@gmail.com', 'clark.kampfe@gmail.com'
  end
end

send_mail(msgstr)
